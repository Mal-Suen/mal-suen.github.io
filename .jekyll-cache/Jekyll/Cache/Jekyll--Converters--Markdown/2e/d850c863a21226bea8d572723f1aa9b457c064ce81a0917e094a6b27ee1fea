I"9'<h2 id="安装nodejs和npm">安装Node.js和npm</h2>

<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。  Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。  Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>

<h4 id="安装nodejs">安装Node.js</h4>

<p>首先，从<a href="https://nodejs.org/">Node.js官网</a>下载对应平台的安装程序，网速慢的童鞋请移步<a href="https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fnodejs">国内镜像</a>。</p>

<p>在Windows上安装时务必选择全部组件，包括勾选<code class="language-plaintext highlighter-rouge">Add to Path</code>，macOS上可以使用<code class="language-plaintext highlighter-rouge">brew</code>命令进行安装即可。</p>

<p>安装完成后，输入<code class="language-plaintext highlighter-rouge">node -v</code>查看版本号。</p>

<h4 id="安装npm">安装npm</h4>

<p>我们为什么需要npm呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。</p>

<p>更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p>

<p>npm已经在Node.js安装的时候顺带装好了，使用<code class="language-plaintext highlighter-rouge">npm -v</code>查看版本号。</p>

<h4 id="npm更新">npm更新</h4>

<p>可以使用<code class="language-plaintext highlighter-rouge">npm update &lt;name&gt;</code>对单个包进行升级，版本大于 <code class="language-plaintext highlighter-rouge">2.6.1</code>则可以使用<code class="language-plaintext highlighter-rouge">npm install</code>进行升级。</p>

<p>有时候使用<code class="language-plaintext highlighter-rouge">npm install</code>并不能正常升级，我们还可以使用<code class="language-plaintext highlighter-rouge">npm outdated</code>查看哪些包有更新，然后将带待更新的包进行更新。</p>

<p><a href="https://www.npmjs.com/package/npm-check">npm-check</a>是用来检查npm依赖包是否有更新，错误以及不在使用的，我们也可以使用npm-check进行包的更新。
安装npm-check：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>npm <span class="nb">install </span>npm-check
</pre></td></tr></tbody></table></code></pre></div></div>

<p>检查npm包的状态:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>npm-check <span class="nt">-u</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>那么<code class="language-plaintext highlighter-rouge">npm install</code>和<code class="language-plaintext highlighter-rouge">npm update</code>有什么区别呢，简而言之就是除了在package.json中处理依赖关系之外，npm install的功能更多。stackoverflow上的问题<a href="https://stackoverflow.com/questions/12478679/npm-install-vs-update-whats-the-difference">npm install vs. update - what’s the difference?</a>有详细的对比，部分原文如下：</p>

<blockquote>
  <p><strong>Why use npm install at all?</strong></p>

  <p>Because <code class="language-plaintext highlighter-rouge">npm install</code> does more when you look besides handling your dependencies in <code class="language-plaintext highlighter-rouge">package.json</code>. As you can see in <a href="https://docs.npmjs.com/cli/install">npm install</a> you can …</p>

  <ul>
    <li>manually install node-modules</li>
    <li>set them as <em>global</em> (which puts them in the shell’s <code class="language-plaintext highlighter-rouge">PATH</code>) using <code class="language-plaintext highlighter-rouge">npm install -g &lt;name&gt;</code></li>
    <li>install certain versions described by git tags</li>
    <li>install from a git url</li>
    <li>force a reinstall with <code class="language-plaintext highlighter-rouge">--force</code></li>
  </ul>
</blockquote>

<h2 id="本地安装与全局安装的区别">本地安装与全局安装的区别</h2>

<p>npm的包安装分为本地安装（local）、全局安装（global）两种，从命令来看，差别只是有没有<code class="language-plaintext highlighter-rouge">-g</code>而已，比如之前的<code class="language-plaintext highlighter-rouge">npm-check</code></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>npm <span class="nb">install </span>npm-check <span class="c"># 本地安装</span>
<span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">-g</span> npm-check <span class="c"># 全局安装</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这两种安装方式有什么区别呢？从<a href="https://npmjs.org/doc/files/npm-folders.html">npm官方文档的说明</a>来看，主要区别在于：</p>

<p><strong>本地安装</strong></p>

<ul>
  <li>将安装包放在 ./node_modules 下（运行npm时所在的目录）</li>
  <li>本地安装后可以直接通过require()的方式引入项目中node_modules目录下的模块</li>
</ul>

<p><strong>全局安装</strong></p>

<ul>
  <li>将安装包放在 /usr/local 下</li>
  <li>全局安装后可以供命令行(command line)使用，用户可以在命令行中直接运行该组件包支持的命令</li>
</ul>

<p><strong>为什么全局安装还要本地安装？</strong></p>

<p>每一次的更新可能带来不一样的功能，在多人合作、发布模块到npmjs社区、上传到github给其他人使用时，保留模块的版本信息可用于下载指定的版本号显得特别重要。
 本地安装可以让每个项目拥有独立的包，不受全局包的影响，方便项目的移动、复制、打包等，<strong>保证不同版本包之间的相互依赖</strong>，这些优点是全局安装难以做到的。
另外，据node团队介绍，本地安装包对于项目的加载会更快。</p>

<h2 id="相关问题">相关问题</h2>

<h4 id="npm-installno-such-file-or-directory">npm install：no such file or directory</h4>

<p>重新安装一次node之后，执行npm install命令时，报错如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>npm WARN saveError ENOENT: no such file or directory, open '/Users/username/package.json'
npm WARN enoent ENOENT: no such file or directory, open '/Users/username/package.json'
npm WARN username No description
npm WARN username No repository field.
npm WARN username No README data
npm WARN username No license field.

up to date in 2.522s
found 0 vulnerabilities
</pre></td></tr></tbody></table></code></pre></div></div>

<p>根据提示，出错的原因是缺少 <code class="language-plaintext highlighter-rouge">package.json</code> 这个文件，解决方法如下：</p>

<p>初始化项目：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>$ npm init -f
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">-f</code>表示force的意思，不加这个，npm会让你输入一堆信息，比如name、version之类，如果只是做做实验小demo，直接<code class="language-plaintext highlighter-rouge">-f</code>，npm帮你初始化package.json，并填充各种默认值，省事。</p>

<p>安装依赖：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>$ npm install formidable --save
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">--save</code>表示将安装的包加入依赖列表的意思，可以看下package.json 里的<code class="language-plaintext highlighter-rouge">dependencies</code>字段。后面再运行 <code class="language-plaintext highlighter-rouge">npm install</code>，就会把所有依赖安装下来。如果不加<code class="language-plaintext highlighter-rouge">--save</code>，什么都不会安装。</p>

<blockquote>
  <p>参考资料：</p>

  <p><a href="https://stackoverflow.com/questions/12478679/npm-install-vs-update-whats-the-difference">npm install vs. update - what’s the difference?</a></p>

  <p><a href="https://www.cnblogs.com/chyingp/p/npm-install-difference-between-local-global.html">npm install —— 从一个简单例子，看本地安装与全局安装的区别</a></p>

  <p><a href="https://segmentfault.com/q/1010000012930521">npm install模块时 报错：not such file or directory。是何原因？</a></p>
</blockquote>

:ET